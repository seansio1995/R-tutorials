boxplot(AirPassengers~cycle(AirPassengers))
adf.test(diff(log(AirPassengers)),alternative="stationary",k=0)
library(tseries)
install.packages(tseries)
install.packages("tseries")
library(tseries)
adf.test(diff(log(AirPassengers)),alternative="stationary",k=0)
?deltat
library(quantmod)
install.packages("quantmod")
library(quantmod)
getSymbols("^GSPC",src="yahoo")
head("GSPC")
getSymbols("SPY",src="google")
head("GSPC")
head("SPY")
getSymbols("SPY",src="google")
tail("SPY")
tail(SPY)
head(SPY)
class(SPY)
?xts
?zoo
summary(SPY)
basket.symbols<-c("YELP","AMZN","AAPL")
getSymbols(basket.symbols)
getSymbols(basket.symbols,src="google")
head(YELP)
head(AMZN)
head(AAPL)
tail(YELP)
tail(AMZN)
tail(AAPL)
basket<-data.frame(as.xts(merge(YELP,AMZN,AAPL)))
head(basket,2)
head(basket,5)
plot(AAPL)
lineChart(AAPL,line.type = "h",theme="white",TA=NULL)
barChart(AAPL,bar.type = "hlc",TA=NULL)
candleChart(AAPL,multi.col = T,TA=NULL)
candleChart(AAPL,multi.col = T,TA=NULL,subset = "2015")
candleChart(AAPL,multi.col = T,TA=NULL,subset = "2015-06")
candleChart(AAPL,multi.col = T,TA=NULL,subset = "2017-04:2017-05")
candleChart(AAPL,multi.col = T,TA=NULL,subset = "2017-04")
candleChart(AAPL,theme=chartTheme("white",up.col="yellow",dn.col="darkred"),TA=NULL,subset="2017-04")
getSymbols("QQQ",src="google")
plot(QQQ$QQQ.close)
plot(QQQ)
candleChart(QQQ,multi.col = T,TA=NULL,subset = "2017-04")
head(QQQ)
plot(QQQ$QQQ.Close)
period<-100
price.vector<-QQQ$QQQ.Close
moving.average.vector<-c()
seq(1:10)
c(1,2,3)[0]
c(1,2,3)[1]
c(1,2,3)[2]
c(4,5,6)[1]
moving.average.vector<-c()
for(ind in seq(1:length(price.vector)-period))
{
moving.average.vector<-c(moving.average.vector,mean(price.vector[ind:ind+period]))
}
c(4,5,6)[1:2]
seq(1:10)[1:2]
seq(1:10)[1:4]
moving.average.vector<-c()
for(ind in seq(1:length(price.vector)-period+1))
{
moving.average.vector<-c(moving.average.vector,mean(price.vector[ind:ind+period-1]))
}
moving.average.vector<-c()
for(ind in seq(1:(length(price.vector)-period+1)))
{
moving.average.vector<-c(moving.average.vector,mean(price.vector[ind:ind+period-1]))
}
par(mfrow=c(2,1))
plot(QQQ$QQQ.Close)
plot(moving_average_vector, type='l', col='red', lwd=3, main
= paste('SMA', period))
plot(QQQ$QQQ.Close)
plot(moving.average.vector, type='l', col='red', lwd=3, main
= paste('SMA', period))
dev.off()
par(mfrow=c(2,1))
plot(QQQ$QQQ.Close)
plot(moving.average.vector, type='l', col='red', lwd=3, main
= paste('SMA', period))
length(price.vector)
length(moving.average.vector)
QQQ$QQQ.Close.SMA<-moving.average.vector
moving.average.vector<-c(rep(NA,period))
for(ind in seq(1:(length(price.vector)-period)))
{
moving.average.vector<-c(moving.average.vector,mean(price.vector[ind:ind+period-1]))
}
QQQ$QQQ.Close.SMA<-moving.average.vector
plot(QQQ$QQQ.Close)
lines(QQQ.Close.SMA,type="l",col="red",lwd=3)
lines(QQQ$QQQ.Close.SMA,type="l",col="red",lwd=3)
plot(QQQ$QQQ.Close)
lines(QQQ$QQQ.Close.SMA,type="l",col="red",lwd=3)
dev.off()
plot(QQQ$QQQ.Close)
lines(QQQ$QQQ.Close.SMA,type="l",col="red",lwd=3)
moving_average_vector <-
c(rep(as.numeric(QQQ$QQQ.Close[period]), period))
for(ind in seq(1:(length(price.vector)-period)))
{
moving.average.vector<-c(moving.average.vector,mean(price.vector[ind:ind+period-1]))
}
plot(QQQ$QQQ.Close)
lines(QQQ$QQQ.Close.SMA,type="l",col="red",lwd=3)
moving.average.vector<-c(rep(NA,period))
moving_average_vector <-
c(rep(as.numeric(QQQ$QQQ.Close[period]), period))
for(ind in seq(1:(length(price.vector)-period-1)))
{
moving.average.vector<-c(moving.average.vector,mean(price.vector[ind:ind+period]))
}
plot(QQQ$QQQ.Close)
lines(QQQ$QQQ.Close.SMA,type="l",col="red",lwd=3)
QQQ$QQQ.Close.SMA<-moving.average.vector
length(moving.average.vector)
length(price.vector)
moving.average.vector<-c(rep(NA,period))
moving_average_vector <-
c(rep(as.numeric(QQQ$QQQ.Close[period]), period))
for(ind in seq(1:(length(price.vector)-period)))
{
moving.average.vector<-c(moving.average.vector,mean(price.vector[ind:ind+period]))
}
length(price.vector)
length(moving.average.vector)
QQQ$QQQ.Close.SMA<-moving.average.vector
plot(QQQ$QQQ.Close)
lines(QQQ$QQQ.Close.SMA,type="l",col="red",lwd=3)
QQQ$QQQ.Close.SMA<-moving.average.vector
plot(QQQ$QQQ.Close)
lines(QQQ$QQQ.Close.SMA,type="l",col="red",lwd=3)
chartSeries(QQQ,theme="white",addSMA(100))
chartSeries(QQQ,theme="white",TA="addSMA(100)")
chartSeries(QQQ,theme="white",TA="addSMA(100)")
getSymbols("QQQ",src="google")
chartSeries(QQQ,theme="white",TA="addSMA(100)")
getSymbols("IBEX",src="google")
chartSeries(IBEX,theme="white",TA="addSMA(100)")
chartSeries(IBEX,theme="white",TA="addSMA(100)")
chartSeries(IBEX,theme="white",TA="addSMA(100)",subset="2009::2013")
getSymbols("AAPL",src="google")
chartSeries(IBEX,theme="white",TA="addSMA(100)",subset="2009::2013")
chartSeries(IBEX,theme="white",TA="addSMA(100)",subset="2009::2013")
dev.off()
getSymbols("AAPL",src="google")
chartSeries(AAPL,theme="white",TA="addSMA(100)",subset="2009::2013")
candleChart(IBEX,multi.col = T,TA=NULL)
candleChart(AAPL,multi.col = T,TA=NULL)
candleChart(AAPL,multi.col = T,TA=NULL,subset = "2014::2017")
candleChart(AAPL,multi.col = T,TA=NULL,subset = "2016::2017")
candleChart(AAPL,multi.col = T,TA=NULL,subset = "2016-07::2016-08")
# Decision Tree Classification
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Decision Tree Classification to the Training set
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Decision Tree Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3], main = 'Decision Tree Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Plotting the tree
plot(classifier)
text(classifier)
getwd()
setwd("/Users/tfsp-h/Documents/R/R-tutorials/Decision_Tree_Classification/")
# Decision Tree Classification
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Decision Tree Classification to the Training set
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Decision Tree Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3], main = 'Decision Tree Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Plotting the tree
plot(classifier)
text(classifier)
plot(set[, -3], main = 'Decision Tree Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
getwd()
setwd("/Users/tfsp-h/Documents/R/R-tutorials/K_Means/")
dataset = read.csv('Mall_Customers.csv')
dataset = dataset[4:5]
View(dataset)
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(dataset, i)$withinss)
plot(1:10,
wcss,
type = 'b',
main = paste('The Elbow Method'),
xlab = 'Number of clusters',
ylab = 'WCSS')
kmeans = kmeans(x = dataset, centers = 5)
y_kmeans = kmeans$cluster
library(cluster)
clusplot(dataset,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
getwd()
setwd("/Users/tfsp-h/Documents/R/R-tutorials/Hierarchical_Clustering/")
dataset = read.csv('Mall_Customers.csv')
dataset = dataset[4:5]
dendrogram = hclust(d = dist(dataset, method = 'euclidean'), method = 'ward.D')
plot(dendrogram,
main = paste('Dendrogram'),
xlab = 'Customers',
ylab = 'Euclidean distances')
hc = hclust(d = dist(dataset, method = 'euclidean'), method = 'ward.D')
y_hc = cutree(hc, 5)
library(cluster)
clusplot(dataset,
y_hc,
lines = 0,
shade = TRUE,
color = TRUE,
labels= 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of customers'),
xlab = 'Annual Income',
ylab = 'Spending Score')
getwd()
setwd("/Users/tfsp-h/Documents/R/R-tutorials/Apriori/")
library(arules)
install.packages('arules')
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
dataset
View(dataset)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
View(dataset)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
inspect(sort(rules, by = 'lift')[1:10])
itemFrequencyPlot(dataset, topN = 100)
itemFrequencyPlot(dataset, topN = 20)
getwd()
setwd("/Users/tfsp-h/Documents/R/R-tutorials/Eclat/")
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv')
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
rules = eclat(data = dataset, parameter = list(support = 0.003, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
rules = eclat(data = dataset, parameter = list(support = 0.05, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
getwd()
setwd("/Users/tfsp-h/Documents/R/R-tutorials/UCB")
dataset = read.csv('Ads_CTR_Optimisation.csv')
N = 10000
d = 10
ads_selected = integer(0)
View(dataset)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
dataset = read.csv('Ads_CTR_Optimisation.csv')
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_selections = integer(d)
sums_of_rewards = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_upper_bound = 0
for (i in 1:d) {
if (numbers_of_selections[i] > 0) {
average_reward = sums_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
1e400
# Upper Confidence Bound
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing UCB
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_selections = integer(d)
sums_of_rewards = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_upper_bound = 0
for (i in 1:d) {
if (numbers_of_selections[i] > 0) {
average_reward = sums_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_bound = average_reward + delta_i
} else {
upper_bound = 1e400
}
if (upper_bound > max_upper_bound) {
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
ads_selected
getwd()
setwd("/Users/tfsp-h/Documents/R/R-tutorials/Thompson_Sampling/")
# Random Selection
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Thompson Sampling
# Importing the dataset
dataset = read.csv('Ads_CTR_Optimisation.csv')
# Implementing Thompson Sampling
N = 10000
d = 10
ads_selected = integer(0)
numbers_of_rewards_1 = integer(d)
numbers_of_rewards_0 = integer(d)
total_reward = 0
for (n in 1:N) {
ad = 0
max_random = 0
for (i in 1:d) {
random_beta = rbeta(n = 1,
shape1 = numbers_of_rewards_1[i] + 1,
shape2 = numbers_of_rewards_0[i] + 1)
if (random_beta > max_random) {
max_random = random_beta
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if (reward == 1) {
numbers_of_rewards_1[ad] = numbers_of_rewards_1[ad] + 1
} else {
numbers_of_rewards_0[ad] = numbers_of_rewards_0[ad] + 1
}
total_reward = total_reward + reward
}
# Visualising the results
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
